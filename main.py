import argparse
import os
from static_analysis_apk import static_analysis, create_features
from gradient_boosting import create_model


def label_apks(malware_dir, goodware_dir):
    apks = []
    labels = []

    # Label malware APKs as 1
    for apk_file in os.listdir(malware_dir):
        apks.append(os.path.join(malware_dir, apk_file))
        labels.append(1)

    # Label benign APKs as 0
    for apk_file in os.listdir(goodware_dir):
        if apk_file.endswith('.apk') or apk_file.endswith('.zip'):
            apks.append(os.path.join(goodware_dir, apk_file))
            labels.append(0)

    return apks, labels


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--malware', type=str, required=True, help='Path to malware directory')
    parser.add_argument('--goodware', type=str, required=True, help='Path to benign directory')
    args = parser.parse_args()

    all_permissions = set()
    all_api_calls = set()
    apk_count = 0
    apks, labels = label_apks(args.malware, args.goodware)

    print('apks:', apks)
    print('Labels:', labels)

    for apk in apks:
        apk_count += 1
        print("Gathering permissions for apk " + str(apk_count))
        _, perms, api_calls = static_analysis(apk, all_permissions, all_api_calls)
        all_permissions.update(perms)
        all_api_calls.update(api_calls)

    features = create_features(apks, all_permissions, all_api_calls)

    print(features)
    print(labels)

    clf = create_model(features, labels, all_permissions, all_api_calls)
