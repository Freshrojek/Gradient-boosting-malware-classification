import re
import androguard.core.bytecodes.apk as apk
import androguard.core.bytecodes.dvm as dvm


def static_analysis(file, all_permissions, all_api_calls):
    apk_features = []
    a = apk.APK(file)

    print("App name:", a.get_app_name())

    d = dvm.DalvikVMFormat(a.get_dex())
    perms = a.get_permissions()
    classes = len(d.get_classes())
    api_calls = set()
    for current_class in d.get_classes():
        for current_method in current_class.get_methods():
            if code := current_method.get_code():
                for i in code.get_bc().get_instructions():
                    if i.get_name() == "invoke-virtual":
                        api_call_signature = i.get_output().split(",")[-1].strip(")")[1:-1]
                        api_calls.update([api_call.split("->")[1] for api_call in
                                          re.findall(r"[^\s]+(?=\()", str(api_call_signature))])

    all_permissions.update(perms)
    all_api_calls.update(api_calls)

    perm_vector = [1 if perm in perms else 0 for perm in all_permissions]
    api_call_vector = [1 if api_call in api_calls else 0 for api_call in all_api_calls]

    apk_features.append(len(perms))
    apk_features.extend(perm_vector)
    apk_features.append(classes)
    apk_features.append(len(api_calls))
    apk_features.extend(api_call_vector)

    return apk_features, perms, api_calls


def create_features(apks, all_permissions, all_api_calls):
    features = []
    for apk in apks:
        apk_features, _, _ = static_analysis(apk, all_permissions, all_api_calls)
        features.append(apk_features)
    return features
