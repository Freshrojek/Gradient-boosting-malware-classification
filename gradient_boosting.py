import re
import pandas as pd
from lime.lime_tabular import LimeTabularExplainer
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score


def create_model(X_train, X_test, y_train, y_test, all_permissions, all_api_calls):
    X_train_df = pd.DataFrame(X_train)  # Convert X_train to DataFrame
    X_test_df = pd.DataFrame(X_test)  # Convert X_test to DataFrame

    clf = GradientBoostingClassifier(n_estimators=500, learning_rate=0.01, max_depth=3, random_state=0)
    clf.fit(X_train_df, y_train)

    y_pred = clf.predict(X_test_df)
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy:", accuracy)

    gb_model = GradientBoostingClassifier()
    gb_model.fit(X_train_df, y_train)
    y_prediction = gb_model.predict(X_test_df)

    print("Initiating the explainer")

    explainer = LimeTabularExplainer(X_train_df.values, feature_names=list(range(len(X_train_df.columns))),
                                     class_names=['benign', 'malware'])
    print("Explaining every feature")

    feature_weights = {}
    explanations = []
    for i in range(len(X_test_df)):
        explanations.append(generate_explanation(explainer, gb_model, X_test_df.iloc[i]))

    # Collect the feature weights from the explanations
    for exp in explanations:
        for feature, weight in exp.as_list():
            if feature in feature_weights:
                feature_weights[feature].append(weight)
            else:
                feature_weights[feature] = [weight]

    # Analyze the feature weights
    salient_features = []
    for feature, weights in feature_weights.items():
        avg_weight = sum(weights) / len(weights)
        salient_features.append((feature, avg_weight))

    # Sort the features based on average weight in descending order
    salient_features.sort(key=lambda x: x[1], reverse=True)

    # Print the top-k salient features
    k = 20
    print(f"Finding the top {k} salient features")

    for feature, weight in salient_features[:k]:
        feature_name = get_feature_name(feature, all_permissions, all_api_calls)
        print(f"Feature: {feature_name}")
        print(f"Average Weight: {weight}")
        print("------------------------------")

    return clf


def generate_explanation(explainer, model, instance):
    return explainer.explain_instance(instance.values, model.predict_proba, num_features=20)


def get_feature_name(feature_idx, all_permissions, all_api_calls):
    if isinstance(feature_idx, str):
        match = re.search(r'\d+', feature_idx)
        if match:
            feature_idx = int(match.group())

    if isinstance(feature_idx, int):
        all_permissions = list(all_permissions)
        all_api_calls = list(all_api_calls)
        if 0 <= feature_idx < len(all_permissions):
            return f"Permission: {all_permissions[feature_idx]}"
        elif len(all_permissions) <= feature_idx < len(all_permissions) + len(all_api_calls):
            api_idx = feature_idx - len(all_permissions)
            return f"API Call: {all_api_calls[api_idx]}"

    return "Unknown Feature"
