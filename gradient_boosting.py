from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import pandas as pd

from sklearn.ensemble import GradientBoostingClassifier
from lime.lime_tabular import LimeTabularExplainer


def create_model(features, labels):
    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)
    clf = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=0)
    clf.fit(X_train, y_train)

    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy:", accuracy)

    gb_model = GradientBoostingClassifier()
    gb_model.fit(X_train, y_train)
    y_prediction = gb_model.predict(X_test)

    X_train = pd.DataFrame(X_train)
    explainer = LimeTabularExplainer(X_train.values, feature_names=X_train.columns.values,
                                     class_names=['benign', 'malware'])
    X_test = pd.DataFrame(X_test)
    instance = X_test.iloc[0]

    explanation = explainer.explain_instance(instance.values, gb_model.predict_proba, num_features=10)
    print(explanation.as_list())

    return clf


