import os

import androguard.core.bytecodes.apk as apk
import androguard.core.bytecodes.dvm as dvm

from dotenv import load_dotenv

def static_analysis((apks, labels)):
    load_dotenv()

    filename = os.getenv("MALWARE_DIRECTORY")

    a = apk.APK(filename)

    print("App name:", a.get_app_name())
    print("Package name:", a.get_package())

    d = dvm.DalvikVMFormat(a.get_dex())

    classes = len(d.get_classes())
    print("Number of classes:", classes)

    perms = a.get_permissions()
    print("Permissions:", perms)

    api_calls = set(signature for current_class in d.get_classes()
                    for current_method in current_class.get_methods()
                    if (code := current_method.get_code())
                    for i in code.get_bc().get_instructions()
                    if i.get_name() == "invoke-virtual"
                    if (signature := i.get_output().split(",")[-1].strip(")")[1:-1]))

    for call in api_calls:
        print("API call: " + call + "\n")

    features = []
    features.append(len(perms))
    features.append(classes)
    features.append(len(api_calls))






# Extract features from a new APK file
new_apk_features = ...

# Predict the label of the new APK file using the trained model
prediction = clf.predict([new_apk_features])
print("Prediction:", prediction)






from sklearn.ensemble import GradientBoostingClassifier
from lime.lime_tabular import LimeTabularExplainer

# Create a Gradient Boosting Classifier object
gb_model = GradientBoostingClassifier()

# Fit the model to the training data
gb_model.fit(X_train, y_train)

# Use the trained model to make predictions on the test data
y_pred = gb_model.predict(X_test)






# Create a LIME explainer object
explainer = LimeTabularExplainer(X_train.values, feature_names=X_train.columns.values, class_names=['benign', 'malware'])

# Select an instance from the test data to explain
instance = X_test.iloc[0]

# Generate an explanation using LIME
exp = explainer.explain_instance(instance.values, gb_model.predict_proba, num_features=10)






# Print out the explanation
print(exp.as_list())



